**Contains some random notes on using git**

* To start tracking code in git...
  Use `git init`
  Simply change into the directory that has the info and the run git intit

* If you've accidentally staged some code that you don't want to commit (ie, you've used git add but don't want to do a git commit),
  use `git reset <filename>` to remove the file from the staged area. It will
  still have your changes, it just won't be in the staged area anymore.

* To see what branches have been merged into the current branch, use `git branch --merged`

* To see info on the current file use `git log <filename>`

* To change the commit message of the most recent file that got checked in, use
  `git commit --amend -m "new message" <filename>`. NOTE: changes the git history so
  it should only be used if a git push has not already been done.

* If you need to add a file to the previous commit:
  first, use `git add <filename>` to add the file to the staging area,
  then, use `git --amend` to bring up the last commit. Then save. This
  will move the staged file into that commit. NOTE: only do this if a push
  has **not** been done.

* How to move a commit from one branch to another branch...
  1. `git log` to get the commit hash to move
  2. switch to the branch to move the commit to.  Eg, `git checkout my-branch`
  3. Use `git cherry-pick <hash>` to grab the commit from the other branch
  4. Change back to the original branch so we can remove the commit from that branch
     eg, `git checkout <orig-branch>`
  5.

* NOTE: types of `git reset`
    soft: removes the commit from the repository, but moves the changes to the
      staging directory. IE, the changes are still there, waiting to be committed
      EG, `git reset --soft <hashcode>`

    mixed: (default) removes the commit from the repository, but moves the changes
      back to the local source. In other words, the code changes are waiting
      to be added and committed. EG, `git reset <hashcode>`

    hard: removes the commit from the repository and does *not* keep the changes.
      In this case, you specify the commit hash that you want it to be moved back
      to. EG, `git reset <hashcode>`

    NOTE: Use `git clean -df` to remove untracked/uncommitted changes from the local
      Used to clean up a file mess.  EG, accidentally copied a bunch of unrelated files
      into the source directory.

* NOTE: You can use `git revert <hashcode>` to revert the code to that hashcode state
      but under a new commit hashcode. This is useful because it keeps the original
      code history which is important if others may have the previously updated code.
      
      
**Git Workflow Notes**
1) Fork a project to a private repository

(from webpage)  git fork (press fork from webpage)
(on local)  git clone <url_link from gatesc/projA>
(on local)   git remote add upstream <url_link from github/EDA/projA>

 

NOTE: here are now the repositiories:

github.ibm.com/EDA/projA    is upstream
gatesc/projA  is origin
projA on local is master

2) Doing work on local and then pushing changes back to the upstream repository

a) create a branch

git checkout -b new_branch

b) do some work on the branch and check in

<editing code on myFile>
git status
git add myFile
git commit -m "added some new important feature" myFile
git push    (note, this pushes the change to the origin (gatesc/projA).  NOT to the upstream)

c) if desired, you can now merge the branch to master and then delete the branch

git checkout master
git merge new_branch
if necessary, use git mergetool myFile, when a conflict has occurred
git branch -d <branch_name>

3) Update the master repo (the local repo) from the upstream repo

git pull upstream master

4) Update the gatesc projA private repository

git push

5) Update the upstream repo from the private gatesc/projA repo

git push upstream master

** More Random Notes **
 To show all the available branches *

git show-branch --list

 

* Delete a branch

git branch -d old_dont_care_branch

 

* Show the configured repositories *

git remote -v

 

* Compare the current repository to the upstream repository

git fetch upstream master

gitdiff upstream/master master

 

*NOTE* gitdiff is an alias that I use... alias gitdiff='git difftool --no-prompt'

To set git difftool to use tkdiff, execute this on the command line:
    git config --global diff.tool tkdiff

    git config --global merge.tool tkdiff

    git config --global --add difftool.prompt false

 

* Restore a particular commit...

git checkout <commit_hash>

git checkout <commit_hash> -- <some_file>


* Check when a branch was created

git show --summary <branch_name>

* Check if a branch has been merged (this lists the branches that have been merged into master)

git branch --merged master

* Get a log of changes that I've made from a date

git log --pretty=oneline --since="2019-01-01" --author="Charles Gates"
git log --pretty=full --since="2019-01-01" --author="Charles Gates"


 


